name: PR Validation

on:
  pull_request:
    branches: [main]

# Add permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent pages deployment per PR
concurrency:
  group: "pages-pr-${{ github.event.number }}"
  cancel-in-progress: false

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      PR_DATABASE_NAME: PR_${{ github.event.number }}_RUN_${{ github.run_id }}_ONLINE_STORE_DEV_CLONE
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Snowflake CLI
        uses: snowflakedb/snowflake-cli-action@v1.5
      
      - name: Create PR Database Clone
        run: |
          echo "üîÑ Creating PR database clone: $PR_DATABASE_NAME"
          echo "üìä Connecting to Snowflake account: ${{ secrets.SNOWFLAKE_ACCOUNT }}"
          
          # Create SQL for PR database clone
          cat << 'EOF' > create_pr_clone.sql
          -- Create PR database clone from ONLINE_STORE_DB (master database)
          -- Note: We clone from the master DB where DATABASE_ADMIN_ROLE owns both schemas,
          -- allowing proper ownership transfer to LIQUIBASE_ROLE and DBT_ROLE
          CREATE DATABASE ${{ env.PR_DATABASE_NAME }} 
              CLONE ONLINE_STORE_DB
              COMMENT = 'PR #${{ github.event.number }} validation database - auto-created by GitHub Actions';
          
          -- Grant permissions to both roles on the PR database
          GRANT USAGE ON DATABASE ${{ env.PR_DATABASE_NAME }} TO ROLE LIQUIBASE_ROLE;
          GRANT USAGE ON DATABASE ${{ env.PR_DATABASE_NAME }} TO ROLE DBT_ROLE;
          
          -- Transfer schema ownership to enable full privileges
          GRANT OWNERSHIP ON SCHEMA ${{ env.PR_DATABASE_NAME }}.PUBLIC TO ROLE LIQUIBASE_ROLE COPY CURRENT GRANTS;
          GRANT OWNERSHIP ON SCHEMA ${{ env.PR_DATABASE_NAME }}.DBT TO ROLE DBT_ROLE COPY CURRENT GRANTS;
          
          -- Grant cross-schema access
          GRANT USAGE ON SCHEMA ${{ env.PR_DATABASE_NAME }}.PUBLIC TO ROLE DBT_ROLE;
          GRANT SELECT ON ALL TABLES IN SCHEMA ${{ env.PR_DATABASE_NAME }}.PUBLIC TO ROLE DBT_ROLE;
          GRANT SELECT ON ALL VIEWS IN SCHEMA ${{ env.PR_DATABASE_NAME }}.PUBLIC TO ROLE DBT_ROLE;
          
          GRANT USAGE ON SCHEMA ${{ env.PR_DATABASE_NAME }}.DBT TO ROLE LIQUIBASE_ROLE;
          GRANT SELECT ON ALL TABLES IN SCHEMA ${{ env.PR_DATABASE_NAME }}.DBT TO ROLE LIQUIBASE_ROLE;
          GRANT SELECT ON ALL VIEWS IN SCHEMA ${{ env.PR_DATABASE_NAME }}.DBT TO ROLE LIQUIBASE_ROLE;
          
          -- Show result
          SELECT 'PR database clone created successfully' AS status;
          SHOW DATABASES LIKE '%${{ env.PR_DATABASE_NAME }}%';
          EOF
          
          # Execute the clone SQL using database admin privileges
          snow sql -f create_pr_clone.sql --temporary-connection \
            --account "${{ secrets.SNOWFLAKE_ACCOUNT }}" \
            --user DATABASE_ADMIN_USER \
            --password "${{ secrets.DATABASE_ADMIN_PASSWORD }}" \
            --role DATABASE_ADMIN_ROLE \
            --warehouse COMPUTE_WH
          
          echo "‚úÖ PR database clone created: $PR_DATABASE_NAME"
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dbt
        run: pip install dbt-snowflake
      
      - name: Setup Liquibase
        uses: liquibase/setup-liquibase@v1
        with:
          version: '4.32.0'
          edition: 'oss'
      
      - name: Deploy PR Database Pipeline
        run: |
          echo "üöÄ Running complete Liquibase + dbt pipeline on $PR_DATABASE_NAME"
          liquibase flow \
            --flow-file=liquibase/flowfiles/deploy.flowfile.yaml \
            --defaults-file=liquibase/properties/liquibase.dev.properties
        env:
          LIQUIBASE_LICENSE_KEY: ${{ secrets.LIQUIBASE_LICENSE_KEY }}
          LIQUIBASE_COMMAND_URL: jdbc:snowflake://${{ secrets.SNOWFLAKE_ACCOUNT }}.snowflakecomputing.com/?db=${{ env.PR_DATABASE_NAME }}&schema=PUBLIC&warehouse=COMPUTE_WH
          LIQUIBASE_COMMAND_USERNAME: LIQUIBASE_USER
          LIQUIBASE_COMMAND_PASSWORD: ${{ secrets.LIQUIBASE_DEV_PASSWORD }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_DATABASE: ${{ env.PR_DATABASE_NAME }}
          DBT_PASSWORD: ${{ secrets.DBT_DEV_PASSWORD }}
          ENVIRONMENT: pr

      # Prepare GitHub Pages deployment for PR reports
      - name: Prepare PR Pages Content
        if: always()
        run: |
          echo "Preparing PR Pages content..."
          
          # Create directory structure for PR Pages
          mkdir -p pages/reports/pr-${{ github.event.number }}
          
          # Copy HTML report if it exists (generated by flowfile)
          if [ -f "deploy-pr.html" ]; then
            cp deploy-pr.html pages/reports/pr-${{ github.event.number }}/
          fi
          
          # Copy snapshot if it exists (generated by flowfile)
          if [ -f "snapshot-pr.json" ]; then
            cp snapshot-pr.json pages/reports/pr-${{ github.event.number }}/
          fi
          
          # Create index.html for this PR
          cat > pages/reports/pr-${{ github.event.number }}/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>PR #${{ github.event.number }} Validation Report</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; margin: 40px; background: #f8fafc; }
                  .header { background: white; border-radius: 8px; padding: 30px; margin-bottom: 30px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
                  .header h1 { margin: 0 0 10px 0; color: #1a202c; }
                  .metadata { color: #718096; margin-bottom: 20px; }
                  .reports { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
                  .report-card { background: white; border-radius: 8px; padding: 20px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
                  .report-card h3 { margin-top: 0; color: #dc2626; }
                  .report-link { display: inline-block; background: #dc2626; color: white; padding: 10px 20px; border-radius: 6px; text-decoration: none; font-weight: 500; }
                  .report-link:hover { background: #b91c1c; }
                  .pr-badge { background: #f59e0b; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 600; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>üîç PR #${{ github.event.number }} Validation <span class="pr-badge">ISOLATED TESTING</span></h1>
                  <div class="metadata">
                      <p><strong>PR:</strong> #${{ github.event.number }} | <strong>Commit:</strong> ${{ github.sha }} | <strong>Database:</strong> $PR_DATABASE_NAME</p>
                      <p><strong>Date:</strong> $(date -u) | <strong>Environment:</strong> pr (isolated clone)</p>
                  </div>
              </div>
              
              <div class="reports">
                  <div class="report-card">
                      <h3>üìä Deployment Report</h3>
                      <p>Complete Liquibase deployment report with changeset details, execution summary, and performance metrics from PR database clone.</p>
                      <a href="deploy-pr.html" class="report-link">View Report</a>
                  </div>
                  
                  <div class="report-card">
                      <h3>üì∏ Database Snapshot</h3>
                      <p>JSON snapshot of the PR database state after deployment completion.</p>
                      <a href="snapshot-pr.json" class="report-link">View Snapshot</a>
                  </div>
              </div>
              
              <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e2e8f0; color: #718096;">
                  <p><a href="https://github.com/${{ github.repository }}/pull/${{ github.event.number }}">‚Üê Back to PR #${{ github.event.number }}</a> | <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">GitHub Actions Run</a></p>
              </div>
          </body>
          </html>
          EOF
          
          echo "PR Pages content prepared for PR #${{ github.event.number }}"

      # Setup GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      # Upload to GitHub Pages
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages

      # Upload artifacts for backward compatibility
      - name: Upload PR Validation Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-validation-report-${{ github.event.number }}-${{ github.sha }}
          path: |
            deploy-pr.html
            snapshot-pr.json
          retention-days: 30
      
      - name: Cleanup PR Database
        if: always()
        run: |
          echo "üßπ Cleaning up PR database: $PR_DATABASE_NAME"
          
          # Create SQL for cleanup
          cat << 'EOF' > cleanup_pr_database.sql
          -- Drop the PR database
          DROP DATABASE IF EXISTS ${{ env.PR_DATABASE_NAME }};
          
          -- Confirm cleanup
          SELECT 'PR database cleanup completed' AS status;
          EOF
          
          # Execute cleanup using database admin privileges
          snow sql -f cleanup_pr_database.sql --temporary-connection \
            --account "${{ secrets.SNOWFLAKE_ACCOUNT }}" \
            --user DATABASE_ADMIN_USER \
            --password "${{ secrets.DATABASE_ADMIN_PASSWORD }}" \
            --role DATABASE_ADMIN_ROLE \
            --warehouse COMPUTE_WH
          
          echo "‚úÖ PR database cleanup completed: $PR_DATABASE_NAME"

      - name: Add PR Validation Report to Summary
        if: always()
        run: |
          if [ -f "deploy-pr.html" ]; then
            echo "## üîç PR #${{ github.event.number }} Validation Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ **PR validation completed with database isolation**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üåê View Online (No Download Required)" >> $GITHUB_STEP_SUMMARY
            echo "üìã **[View PR Validation Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/reports/pr-${{ github.event.number }}/)**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìä Testing Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Database Clone:** \`$PR_DATABASE_NAME\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Pipeline Stages:** validate ‚Üí status ‚Üí deploy ‚Üí dbt ‚Üí snapshot" >> $GITHUB_STEP_SUMMARY
            echo "- **Isolation:** Changes tested against temporary PR clone only" >> $GITHUB_STEP_SUMMARY
            echo "- **Cleanup:** PR database automatically removed after testing" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üì• Download Report (Alternative)" >> $GITHUB_STEP_SUMMARY
            echo "üìÑ **Artifact Name:** \`pr-validation-report-${{ github.event.number }}-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**üìã The validation report contains:**" >> $GITHUB_STEP_SUMMARY
            echo "- Applied changesets and their details" >> $GITHUB_STEP_SUMMARY
            echo "- Database objects created/modified" >> $GITHUB_STEP_SUMMARY
            echo "- dbt model compilation and test results" >> $GITHUB_STEP_SUMMARY
            echo "- Execution summary and statistics" >> $GITHUB_STEP_SUMMARY
            echo "- PR database snapshot (JSON format)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **PR validation report not found**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The validation pipeline may have completed without generating reports." >> $GITHUB_STEP_SUMMARY
          fi

  # Deploy PR reports to GitHub Pages
  deploy-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: validate
    if: always()
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4