name: PR Validation

on:
  pull_request:
    branches: [main]

# Basic permissions for PR validation
permissions:
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      PR_DATABASE_NAME: PR_${{ github.event.number }}_RUN_${{ github.run_id }}_ONLINE_STORE_DEV_CLONE
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Snowflake CLI
        uses: snowflakedb/snowflake-cli-action@v1.5
      
      - name: Create PR Database Clone
        run: |
          echo "🔄 Creating PR database clone: $PR_DATABASE_NAME"
          echo "📊 Connecting to Snowflake account: ${{ secrets.SNOWFLAKE_ACCOUNT }}"
          
          # Create SQL for PR database clone
          cat << 'EOF' > create_pr_clone.sql
          -- Create PR database clone from ONLINE_STORE_DB (master database)
          -- Note: We clone from the master DB where DATABASE_ADMIN_ROLE owns both schemas,
          -- allowing proper ownership transfer to LIQUIBASE_ROLE and DBT_ROLE
          CREATE DATABASE ${{ env.PR_DATABASE_NAME }} 
              CLONE ONLINE_STORE_DB
              COMMENT = 'PR #${{ github.event.number }} validation database - auto-created by GitHub Actions';
          
          -- Grant permissions to both roles on the PR database
          GRANT USAGE ON DATABASE ${{ env.PR_DATABASE_NAME }} TO ROLE LIQUIBASE_ROLE;
          GRANT USAGE ON DATABASE ${{ env.PR_DATABASE_NAME }} TO ROLE DBT_ROLE;
          
          -- Transfer schema ownership to enable full privileges
          GRANT OWNERSHIP ON SCHEMA ${{ env.PR_DATABASE_NAME }}.PUBLIC TO ROLE LIQUIBASE_ROLE COPY CURRENT GRANTS;
          GRANT OWNERSHIP ON SCHEMA ${{ env.PR_DATABASE_NAME }}.DBT TO ROLE DBT_ROLE COPY CURRENT GRANTS;
          
          -- Grant cross-schema access
          GRANT USAGE ON SCHEMA ${{ env.PR_DATABASE_NAME }}.PUBLIC TO ROLE DBT_ROLE;
          GRANT SELECT ON ALL TABLES IN SCHEMA ${{ env.PR_DATABASE_NAME }}.PUBLIC TO ROLE DBT_ROLE;
          GRANT SELECT ON ALL VIEWS IN SCHEMA ${{ env.PR_DATABASE_NAME }}.PUBLIC TO ROLE DBT_ROLE;
          
          GRANT USAGE ON SCHEMA ${{ env.PR_DATABASE_NAME }}.DBT TO ROLE LIQUIBASE_ROLE;
          GRANT SELECT ON ALL TABLES IN SCHEMA ${{ env.PR_DATABASE_NAME }}.DBT TO ROLE LIQUIBASE_ROLE;
          GRANT SELECT ON ALL VIEWS IN SCHEMA ${{ env.PR_DATABASE_NAME }}.DBT TO ROLE LIQUIBASE_ROLE;
          
          -- Show result
          SELECT 'PR database clone created successfully' AS status;
          SHOW DATABASES LIKE '%${{ env.PR_DATABASE_NAME }}%';
          EOF
          
          # Execute the clone SQL using database admin privileges
          snow sql -f create_pr_clone.sql --temporary-connection \
            --account "${{ secrets.SNOWFLAKE_ACCOUNT }}" \
            --user DATABASE_ADMIN_USER \
            --password "${{ secrets.DATABASE_ADMIN_PASSWORD }}" \
            --role DATABASE_ADMIN_ROLE \
            --warehouse COMPUTE_WH
          
          echo "✅ PR database clone created: $PR_DATABASE_NAME"
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dbt
        run: pip install dbt-snowflake
      
      - name: Setup Liquibase
        uses: liquibase/setup-liquibase@v1
        with:
          version: '4.32.0'
          edition: 'oss'
      
      - name: Deploy PR Database Pipeline
        run: |
          echo "🚀 Running complete Liquibase + dbt pipeline on $PR_DATABASE_NAME"
          liquibase flow \
            --flow-file=liquibase/flowfiles/deploy.flowfile.yaml \
            --defaults-file=liquibase/properties/liquibase.dev.properties
        env:
          LIQUIBASE_LICENSE_KEY: ${{ secrets.LIQUIBASE_LICENSE_KEY }}
          LIQUIBASE_COMMAND_URL: jdbc:snowflake://${{ secrets.SNOWFLAKE_ACCOUNT }}.snowflakecomputing.com/?db=${{ env.PR_DATABASE_NAME }}&schema=PUBLIC&warehouse=COMPUTE_WH
          LIQUIBASE_COMMAND_USERNAME: LIQUIBASE_USER
          LIQUIBASE_COMMAND_PASSWORD: ${{ secrets.LIQUIBASE_DEV_PASSWORD }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_DATABASE: ${{ env.PR_DATABASE_NAME }}
          DBT_PASSWORD: ${{ secrets.DBT_DEV_PASSWORD }}
          ENVIRONMENT: pr

      # Upload artifacts for PR reports
      - name: Upload PR Validation Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-validation-report-${{ github.event.number }}-${{ github.sha }}
          path: |
            deploy-pr.html
            snapshot-pr.json
          retention-days: 30
      
      - name: Cleanup PR Database
        if: always()
        run: |
          echo "🧹 Cleaning up PR database: $PR_DATABASE_NAME"
          
          # Create SQL for cleanup
          cat << 'EOF' > cleanup_pr_database.sql
          -- Drop the PR database
          DROP DATABASE IF EXISTS ${{ env.PR_DATABASE_NAME }};
          
          -- Confirm cleanup
          SELECT 'PR database cleanup completed' AS status;
          EOF
          
          # Execute cleanup using database admin privileges
          snow sql -f cleanup_pr_database.sql --temporary-connection \
            --account "${{ secrets.SNOWFLAKE_ACCOUNT }}" \
            --user DATABASE_ADMIN_USER \
            --password "${{ secrets.DATABASE_ADMIN_PASSWORD }}" \
            --role DATABASE_ADMIN_ROLE \
            --warehouse COMPUTE_WH
          
          echo "✅ PR database cleanup completed: $PR_DATABASE_NAME"

      - name: Add PR Validation Report to Summary
        if: always()
        run: |
          if [ -f "deploy-pr.html" ]; then
            echo "## 🔍 PR #${{ github.event.number }} Validation Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **PR validation completed with database isolation**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📊 Testing Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Database Clone:** \`$PR_DATABASE_NAME\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Pipeline Stages:** validate → status → deploy → dbt → snapshot" >> $GITHUB_STEP_SUMMARY
            echo "- **Isolation:** Changes tested against temporary PR clone only" >> $GITHUB_STEP_SUMMARY
            echo "- **Cleanup:** PR database automatically removed after testing" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📥 Download Validation Report" >> $GITHUB_STEP_SUMMARY
            echo "📄 **Artifact Name:** \`pr-validation-report-${{ github.event.number }}-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**📋 The validation report contains:**" >> $GITHUB_STEP_SUMMARY
            echo "- Applied changesets and their details" >> $GITHUB_STEP_SUMMARY
            echo "- Database objects created/modified" >> $GITHUB_STEP_SUMMARY
            echo "- dbt model compilation and test results" >> $GITHUB_STEP_SUMMARY
            echo "- Execution summary and statistics" >> $GITHUB_STEP_SUMMARY
            echo "- PR database snapshot (JSON format)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **PR validation report not found**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The validation pipeline may have completed without generating reports." >> $GITHUB_STEP_SUMMARY
          fi

